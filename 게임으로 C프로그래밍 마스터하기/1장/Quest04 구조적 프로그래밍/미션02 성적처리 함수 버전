// 구조적 프로그래밍
// 앞선 Quest에서 만들었던 성적처리를 구조적 프로그래밍(각 과목에 임의의 점수를 받는 함수, 합계와 평균을 구하는 함수, 학생의 성적을 출력하는 함수, 1등한 학생의 성적을 출력) 기법을 이용하여 각각 완성하라.
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void Score(int kor[10], int eng[10], int math[10]) {
	int i;

	srand(time_t(NULL));

	for (i = 0; i < 10; i++) {
		kor[i] = rand() % 101;
		eng[i] = rand() % 101;
		math[i] = rand() % 101;
	}
}

void TotalAvr(int kor[10], int eng[10], int math[10], int total[10], double avr[10]) {
	int i;
	for (i = 0; i < 10; i++) {
		total[i] = kor[i] + eng[i] + math[i];
		avr[i] = (double)total[i] / 3.0;
	}
}

void MaxIndex(int total[10], int* maxindex) {
	int i;
	*maxindex = 0;
	for (i = 0; i < 10; i++) {
		if (total[*maxindex] < total[i]) {
			*maxindex = i;
		}
	}
}

void Print(int kor[10], int eng[10], int math[10], int total[10], double avr[10], int maxindex) {
	int i;
	for (i = 0; i < 10; i++) {
		printf("%d] %d\t %d\t %d\t %d\t %.2f\n", i, kor[i], eng[i], math[i], total[i], avr[i]);
	}
	printf("max index: %d\n", maxindex);
}

int main() {
//	int i;
	int maxindex;

	int kor[10];
	int eng[10];
	int math[10];

	int total[10];
	double avr[10];

	Score(kor, eng, math);  // 배열 전달할 때 길이 빼고

	TotalAvr(kor, eng, math, total, avr);

	MaxIndex(total, &maxindex);

	Print(kor, eng, math, total, avr, maxindex);


/*	srand(time_t(NULL));

	for (i = 0; i < 10; i++) {
		kor[i] = rand() % 101;
		eng[i] = rand() % 101;
		math[i] = rand() % 101;
	}

	for (i = 0; i < 10; i++) {
		total[i] = kor[i] + eng[i] + math[i];
		avr[i] = (double)total[i] / 3.0;
	}

	maxindex = 0;
	for (i = 0; i < 10; i++) {
		if (total[maxindex] < total[i]) {
			maxindex = i;
		}
	}

	for (i = 0; i < 10; i++) {
		printf("%d] %d\t %d\t %d\t %d\t %.2f\n", i, kor[i], eng[i], math[i], total[i], avr[i]);
	}
	printf("max index: %d\n", maxindex); */

	return 0;
}
